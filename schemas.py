content='from datetime import datetime\nfrom typing import Optional, List\nfrom pydantic import BaseModel, EmailStr, Field, validator\nfrom enum import Enum\n\nclass UserRole(str, Enum):\n    ADMIN = "admin"\n    USER = "user"\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    full_name: Optional[str] = Field(None, max_length=100)\n    role: UserRole = Field(default=UserRole.USER)\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=100)\n    \n    @validator(\'password\')\n    def validate_password(cls, v):\n        if not any(c.isupper() for c in v):\n            raise ValueError(\'Password must contain at least one uppercase letter\')\n        if not any(c.islower() for c in v):\n            raise ValueError(\'Password must contain at least one lowercase letter\')\n        if not any(c.isdigit() for c in v):\n            raise ValueError(\'Password must contain at least one number\')\n        return v\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    username: Optional[str] = Field(None, min_length=3, max_length=50)\n    full_name: Optional[str] = Field(None, max_length=100)\n    password: Optional[str] = Field(None, min_length=8, max_length=100)\n\nclass UserInDB(UserBase):\n    id: int\n    hashed_password: str\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        orm_mode = True\n\nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    username: str\n    full_name: Optional[str]\n    role: UserRole\n    created_at: datetime\n\n    class Config:\n        orm_mode = True\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass TokenData(BaseModel):\n    email: Optional[str] = None\n    user_id: Optional[int] = None\n    role: Optional[UserRole] = None\n\nclass ErrorResponse(BaseModel):\n    detail: str\n    error_code: Optional[str] = None\n    timestamp: datetime = Field(default_factory=datetime.utcnow)\n\nclass SuccessResponse(BaseModel):\n    message: str\n    data: Optional[dict] = None\n    timestamp: datetime = Field(default_factory=datetime.utcnow)\n\nclass PaginatedResponse(BaseModel):\n    items: List[UserResponse]\n    total: int\n    page: int\n    size: int\n    pages: int\n\n    @validator(\'pages\')\n    def validate_pages(cls, v, values):\n        if v < 0:\n            return 0\n        return v\n\n    class Config:\n        orm_mode = True\n\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    password: str = Field(..., min_length=8, max_length=100)\n\nclass ChangePasswordRequest(BaseModel):\n    current_password: str = Field(..., min_length=8, max_length=100)\n    new_password: str = Field(..., min_length=8, max_length=100)\n\n    @validator(\'new_password\')\n    def validate_new_password(cls, v, values):\n        if \'current_password\' in values and v == values[\'current_password\']:\n            raise ValueError(\'New password must be different from current password\')\n        if not any(c.isupper() for c in v):\n            raise ValueError(\'Password must contain at least one uppercase letter\')\n        if not any(c.islower() for c in v):\n            raise ValueError(\'Password must contain at least one lowercase letter\')\n        if not any(c.isdigit() for c in v):\n            raise ValueError(\'Password must contain at least one number\')\n        return v' additional_kwargs={} response_metadata={'id': 'msg_015FpVqw7apXTHrMKLuwGFHu', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 340, 'output_tokens': 959, 'service_tier': 'standard'}} id='run--d960d4a9-e083-4503-a3da-2e132d450647-0' usage_metadata={'input_tokens': 340, 'output_tokens': 959, 'total_tokens': 1299, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}