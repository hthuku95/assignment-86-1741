content='import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.database import Base\nfrom app.main import app\nfrom app.dependencies import get_db\nfrom app.security import create_access_token\nfrom app.models import User\nfrom app.schemas import UserCreate\n\nSQLALCHEMY_DATABASE_URL = "sqlite://"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={"check_same_thread": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase.metadata.create_all(bind=engine)\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\nclient = TestClient(app)\n\n@pytest.fixture\ndef test_db():\n    Base.metadata.create_all(bind=engine)\n    yield\n    Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture\ndef test_user():\n    user_data = {\n        "email": "test@example.com",\n        "password": "testpassword123",\n        "full_name": "Test User"\n    }\n    return user_data\n\ndef test_create_user(test_db, test_user):\n    response = client.post("/users/", json=test_user)\n    assert response.status_code == 201\n    data = response.json()\n    assert data["email"] == test_user["email"]\n    assert data["full_name"] == test_user["full_name"]\n    assert "password" not in data\n\ndef test_create_duplicate_user(test_db, test_user):\n    client.post("/users/", json=test_user)\n    response = client.post("/users/", json=test_user)\n    assert response.status_code == 400\n    assert "Email already registered" in response.json()["detail"]\n\ndef test_login_user(test_db, test_user):\n    client.post("/users/", json=test_user)\n    login_data = {\n        "username": test_user["email"],\n        "password": test_user["password"]\n    }\n    response = client.post("/token", data=login_data)\n    assert response.status_code == 200\n    data = response.json()\n    assert "access_token" in data\n    assert data["token_type"] == "bearer"\n\ndef test_login_wrong_password(test_db, test_user):\n    client.post("/users/", json=test_user)\n    login_data = {\n        "username": test_user["email"],\n        "password": "wrongpassword"\n    }\n    response = client.post("/token", data=login_data)\n    assert response.status_code == 401\n    assert "Incorrect email or password" in response.json()["detail"]\n\ndef test_get_current_user(test_db, test_user):\n    create_response = client.post("/users/", json=test_user)\n    user_id = create_response.json()["id"]\n    \n    login_data = {\n        "username": test_user["email"],\n        "password": test_user["password"]\n    }\n    token_response = client.post("/token", data=login_data)\n    token = token_response.json()["access_token"]\n    \n    headers = {"Authorization": f"Bearer {token}"}\n    response = client.get("/users/me", headers=headers)\n    \n    assert response.status_code == 200\n    data = response.json()\n    assert data["email"] == test_user["email"]\n    assert data["id"] == user_id\n\ndef test_get_current_user_invalid_token(test_db):\n    headers = {"Authorization": "Bearer invalid_token"}\n    response = client.get("/users/me", headers=headers)\n    assert response.status_code == 401\n    assert "Could not validate credentials" in response.json()["detail"]\n\ndef test_get' additional_kwargs={} response_metadata={'id': 'msg_01GmZhPb5GKBZhFsbcXbDwUF', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 336, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--c6b5e010-b09f-4034-aefc-ae35ee950199-0' usage_metadata={'input_tokens': 336, 'output_tokens': 1024, 'total_tokens': 1360, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}