content='import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.main import app\nfrom app.database import Base\nfrom app.config import get_settings\n\nSQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={"check_same_thread": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase.metadata.create_all(bind=engine)\n\nclient = TestClient(app)\n\ndef get_test_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n@pytest.fixture(autouse=True)\ndef setup_db():\n    Base.metadata.create_all(bind=engine)\n    yield\n    Base.metadata.drop_all(bind=engine)\n\ndef test_read_main():\n    response = client.get("/")\n    assert response.status_code == 200\n    assert response.json() == {"message": "Welcome to Success Test API"}\n\ndef test_create_user():\n    response = client.post(\n        "/users/",\n        json={"email": "test@example.com", "password": "testpassword123"}\n    )\n    assert response.status_code == 201\n    data = response.json()\n    assert data["email"] == "test@example.com"\n    assert "id" in data\n\ndef test_create_duplicate_user():\n    # Create first user\n    client.post(\n        "/users/",\n        json={"email": "test@example.com", "password": "testpassword123"}\n    )\n    \n    # Try to create duplicate user\n    response = client.post(\n        "/users/",\n        json={"email": "test@example.com", "password": "testpassword123"}\n    )\n    assert response.status_code == 400\n    assert "already registered" in response.json()["detail"]\n\ndef test_login():\n    # Create user first\n    client.post(\n        "/users/",\n        json={"email": "test@example.com", "password": "testpassword123"}\n    )\n    \n    # Test login\n    response = client.post(\n        "/token",\n        data={"username": "test@example.com", "password": "testpassword123"}\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert "access_token" in data\n    assert data["token_type"] == "bearer"\n\ndef test_login_invalid_credentials():\n    response = client.post(\n        "/token",\n        data={"username": "wrong@example.com", "password": "wrongpassword"}\n    )\n    assert response.status_code == 401\n    assert "Incorrect email or password" in response.json()["detail"]\n\ndef test_get_users_me():\n    # Create and login user\n    client.post(\n        "/users/",\n        json={"email": "test@example.com", "password": "testpassword123"}\n    )\n    login_response = client.post(\n        "/token",\n        data={"username": "test@example.com", "password": "testpassword123"}\n    )\n    token = login_response.json()["access_token"]\n    \n    # Test get current user\n    response = client.get(\n        "/users/me",\n        headers={"Authorization": f"Bearer {token}"}\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data["email"] == "test@example.com"\n\ndef test_get_users_me_invalid_token():\n    response = client.get(\n        "/users/me",\n        headers={"Authorization": "Bearer invalid_token"}\n    )\n    assert response.status_code == 401\n    assert "Could not validate credentials" in response.json()["detail"]\n\ndef test_update_user():\n    # Create and login user\n    client.post(\n        "/users/",\n        json={"email":' additional_kwargs={} response_metadata={'id': 'msg_01HZCeGTM2hJpv2HFXRvJMxd', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 337, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a3dae77e-2260-41cc-8576-59e4bbb3ed62-0' usage_metadata={'input_tokens': 337, 'output_tokens': 1024, 'total_tokens': 1361, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}